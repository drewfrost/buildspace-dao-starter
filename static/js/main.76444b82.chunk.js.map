{"version":3,"sources":["App.jsx","index.js"],"names":["sdk","ThirdwebSDK","process","REACT_APP_ETHEREUM_NETWORK","bundleDropModule","getBundleDropModule","REACT_APP_BUNDLE_DROP_ADDRESS","tokenModule","getTokenModule","REACT_APP_ERC20_CONTRACT_ADDRESS","voteModule","getVoteModule","REACT_APP_GOVERNANCE_CONTRACT_ADDRESS","App","useWeb3","connectWallet","address","provider","error","console","log","useState","claimedNFT","setClaimedNFT","isClaiming","setIsClaiming","memberTokenAmounts","setMemberTokenAmounts","memberAddresses","setMemberAddresses","proposals","setProposals","isVoting","setIsVoting","hasVoted","setHasVoted","useEffect","getAll","then","catch","err","length","proposalId","getAllClaimerAddresses","addresses","getAllHolderBalances","amounts","memberList","useMemo","map","tokenAmount","ethers","utils","formatUnits","signer","getSigner","undefined","setProviderOrSigner","balanceOf","balance","gt","UnsupportedChainIdError","className","member","str","substring","onSubmit","e","a","preventDefault","stopPropagation","votes","proposal","voteResult","vote","forEach","document","getElementById","type","checked","getDelegationOf","constants","AddressZero","delegateTo","Promise","all","get","state","execute","index","description","id","name","value","defaultChecked","htmlFor","label","disabled","onClick","claim","finally","ReactDOM","render","StrictMode","connectors","injected","supportedChainIds"],"mappings":"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","file":"static/js/main.76444b82.chunk.js","sourcesContent":["import { useWeb3 } from '@3rdweb/hooks';\nimport { ThirdwebSDK } from '@3rdweb/sdk';\nimport { ethers } from 'ethers';\nimport { UnsupportedChainIdError } from '@web3-react/core';\nimport { useEffect, useState, useMemo } from 'react';\n\nconst sdk = new ThirdwebSDK(process.env.REACT_APP_ETHEREUM_NETWORK);\nconst bundleDropModule = sdk.getBundleDropModule(\n  process.env.REACT_APP_BUNDLE_DROP_ADDRESS\n);\nconst tokenModule = sdk.getTokenModule(\n  process.env.REACT_APP_ERC20_CONTRACT_ADDRESS\n);\nconst voteModule = sdk.getVoteModule(\n  process.env.REACT_APP_GOVERNANCE_CONTRACT_ADDRESS\n);\nconst App = () => {\n  const { connectWallet, address, provider, error } = useWeb3();\n  console.log('👋 Address:', address);\n\n  const [claimedNFT, setClaimedNFT] = useState(false);\n  const [isClaiming, setIsClaiming] = useState(false);\n  const [memberTokenAmounts, setMemberTokenAmounts] = useState({});\n  const [memberAddresses, setMemberAddresses] = useState([]);\n  const [proposals, setProposals] = useState([]);\n  const [isVoting, setIsVoting] = useState(false);\n  const [hasVoted, setHasVoted] = useState(false);\n\n  useEffect(() => {\n    if (!claimedNFT) {\n      return;\n    }\n    // A simple call to voteModule.getAll() to grab the proposals.\n    voteModule\n      .getAll()\n      .then((proposals) => {\n        // Set state!\n        setProposals(proposals);\n        console.log('🌈 Proposals:', proposals);\n      })\n      .catch((err) => {\n        console.error('failed to get proposals', err);\n      });\n  }, [claimedNFT]);\n\n  // We also need to check if the user already voted.\n  useEffect(() => {\n    if (!claimedNFT) {\n      return;\n    }\n\n    // If we haven't finished retrieving the proposals from the useEffect above\n    // then we can't check if the user voted yet!\n    if (!proposals.length) {\n      return;\n    }\n\n    // Check if the user has already voted on the first proposal.\n    voteModule\n      .hasVoted(proposals[0].proposalId, address)\n      .then((hasVoted) => {\n        setHasVoted(hasVoted);\n        if (hasVoted) {\n          console.log('🥵 User has already voted');\n        } else {\n          console.log('🙂 User has not voted yet');\n        }\n      })\n      .catch((err) => {\n        console.error('failed to check if wallet has voted', err);\n      });\n  }, [claimedNFT, proposals, address]);\n\n  const shortenAddress = (str) => {\n    return str.substring(0, 6) + '...' + str.substring(str.length - 4);\n  };\n  useEffect(() => {\n    if (!claimedNFT) {\n      return;\n    }\n\n    bundleDropModule\n      .getAllClaimerAddresses('0')\n      .then((addresses) => {\n        console.log('🚀 Members addresses', addresses);\n        setMemberAddresses(addresses);\n      })\n      .catch((err) => {\n        console.error('failed to get member list', err);\n      });\n  }, [claimedNFT]);\n  useEffect(() => {\n    if (!claimedNFT) {\n      return;\n    }\n\n    tokenModule\n      .getAllHolderBalances()\n      .then((amounts) => {\n        console.log('👜 Amounts', amounts);\n        setMemberTokenAmounts(amounts);\n      })\n      .catch((err) => {\n        console.error('failed to get token amounts', err);\n      });\n  }, [claimedNFT]);\n  const memberList = useMemo(() => {\n    return memberAddresses.map((address) => {\n      return {\n        address,\n        tokenAmount: ethers.utils.formatUnits(\n          memberTokenAmounts[address] || 0,\n          18\n        ),\n      };\n    });\n  }, [memberAddresses, memberTokenAmounts]);\n\n  const signer = provider ? provider.getSigner() : undefined;\n\n  useEffect(() => {\n    sdk.setProviderOrSigner(signer);\n  }, [signer]);\n\n  useEffect(() => {\n    if (!address) {\n      return;\n    }\n    return bundleDropModule\n      .balanceOf(address, '0')\n      .then((balance) => {\n        if (balance.gt(0)) {\n          setClaimedNFT(true);\n          console.log('🌟 this user has a membership NFT!');\n        } else {\n          setClaimedNFT(false);\n          console.log(\"😭 this user doesn't have a membership NFT.\");\n        }\n      })\n      .catch((error) => {\n        setClaimedNFT(false);\n        console.error('failed to get nft balance', error);\n      });\n  }, [address]);\n\n  const mintNFT = () => {\n    setIsClaiming(true);\n    bundleDropModule\n      .claim('0', 1)\n      .then(() => {\n        setClaimedNFT(true);\n        console.log(\n          `🌊 Successfully Minted! Check it our on OpenSea: https://testnets.opensea.io/assets/${bundleDropModule.address}/0`\n        );\n      })\n      .catch((err) => {\n        console.error('failed to claim', err);\n      })\n      .finally(() => {\n        setIsClaiming(false);\n      });\n  };\n\n  if (error instanceof UnsupportedChainIdError) {\n    return (\n      <div className=\"unsupported-network\">\n        <h2>Please connect to Rinkeby</h2>\n        <p>\n          This dapp only works on the Rinkeby network, please switch networks in\n          your connected wallet.\n        </p>\n      </div>\n    );\n  }\n\n  if (!address) {\n    return (\n      <div className=\"landing\">\n        <h1>Welcome to HamsterDAO</h1>\n        <button onClick={() => connectWallet('injected')} className=\"btn-hero\">\n          Connect your wallet\n        </button>\n      </div>\n    );\n  }\n  if (claimedNFT) {\n    return (\n      <div className=\"member-page\">\n        <h1>🍪DAO Member Page</h1>\n        <p>Congratulations on being a member</p>\n        <div>\n          <div>\n            <h2>Member List</h2>\n            <table className=\"card\">\n              <thead>\n                <tr>\n                  <th>Address</th>\n                  <th>Token Amount</th>\n                </tr>\n              </thead>\n              <tbody>\n                {memberList.map((member) => {\n                  return (\n                    <tr key={member.address}>\n                      <td>{shortenAddress(member.address)}</td>\n                      <td>{member.tokenAmount}</td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n          <div>\n            <h2>Active Proposals</h2>\n            <form\n              onSubmit={async (e) => {\n                e.preventDefault();\n                e.stopPropagation();\n\n                setIsVoting(true);\n\n                const votes = proposals.map((proposal) => {\n                  let voteResult = {\n                    proposalId: proposal.proposalId,\n\n                    vote: 2,\n                  };\n                  proposal.votes.forEach((vote) => {\n                    const elem = document.getElementById(\n                      proposal.proposalId + '-' + vote.type\n                    );\n\n                    if (elem.checked) {\n                      voteResult.vote = vote.type;\n                      return;\n                    }\n                  });\n                  return voteResult;\n                });\n\n                try {\n                  const delegation = await tokenModule.getDelegationOf(address);\n\n                  if (delegation === ethers.constants.AddressZero) {\n                    await tokenModule.delegateTo(address);\n                  }\n\n                  try {\n                    await Promise.all(\n                      votes.map(async (vote) => {\n                        const proposal = await voteModule.get(vote.proposalId);\n\n                        if (proposal.state === 1) {\n                          return voteModule.vote(vote.proposalId, vote.vote);\n                        }\n\n                        return;\n                      })\n                    );\n                    try {\n                      await Promise.all(\n                        votes.map(async (vote) => {\n                          const proposal = await voteModule.get(\n                            vote.proposalId\n                          );\n\n                          if (proposal.state === 4) {\n                            return voteModule.execute(vote.proposalId);\n                          }\n                        })\n                      );\n\n                      setHasVoted(true);\n\n                      console.log('successfully voted');\n                    } catch (err) {\n                      console.error('failed to execute votes', err);\n                    }\n                  } catch (err) {\n                    console.error('failed to vote', err);\n                  }\n                } catch (err) {\n                  console.error('failed to delegate tokens');\n                } finally {\n                  setIsVoting(false);\n                }\n              }}\n            >\n              {proposals.map((proposal, index) => (\n                <div key={proposal.proposalId} className=\"card\">\n                  <h5>{proposal.description}</h5>\n                  <div>\n                    {proposal.votes.map((vote) => (\n                      <div key={vote.type}>\n                        <input\n                          type=\"radio\"\n                          id={proposal.proposalId + '-' + vote.type}\n                          name={proposal.proposalId}\n                          value={vote.type}\n                          defaultChecked={vote.type === 2}\n                        />\n                        <label htmlFor={proposal.proposalId + '-' + vote.type}>\n                          {vote.label}\n                        </label>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              ))}\n              <button disabled={isVoting || hasVoted} type=\"submit\">\n                {isVoting\n                  ? 'Voting...'\n                  : hasVoted\n                  ? 'You Already Voted'\n                  : 'Submit Votes'}\n              </button>\n              <small>\n                This will trigger multiple transactions that you will need to\n                sign.\n              </small>\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"mint-nft\">\n      <h1>Mint your free 🍪DAO Membership NFT</h1>\n      <button disabled={isClaiming} onClick={() => mintNFT()}>\n        {isClaiming ? 'Minting...' : 'Mint your nft (FREE)'}\n      </button>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport { ThirdwebWeb3Provider } from '@3rdweb/hooks';\n\nconst supportedChainIds = [4];\n\nconst connectors = {\n  injected: {},\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThirdwebWeb3Provider\n      connectors={connectors}\n      supportedChainIds={supportedChainIds}\n    >\n      <div className=\"landing\">\n        <App />\n      </div>\n    </ThirdwebWeb3Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}